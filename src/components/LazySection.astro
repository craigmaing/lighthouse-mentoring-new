---
export interface Props {
  class?: string;
  rootMargin?: string;
  threshold?: number;
}

const {
  class: className = '',
  rootMargin = '100px',
  threshold = 0.1
} = Astro.props;

// Generate unique ID for this section
const sectionId = `lazy-section-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  id={sectionId}
  class={`lazy-section ${className}`}
  data-root-margin={rootMargin}
  data-threshold={threshold}
>
  <slot />
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const lazySection = document.querySelectorAll('.lazy-section');

    if ('IntersectionObserver' in window) {
      lazySection.forEach(section => {
        const rootMargin = section.dataset.rootMargin || '100px';
        const threshold = parseFloat(section.dataset.threshold) || 0.1;

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-visible');

              // Load any lazy content within
              const lazyImages = entry.target.querySelectorAll('img[data-src]');
              lazyImages.forEach(img => {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
              });

              // Stop observing once loaded
              observer.unobserve(entry.target);
            }
          });
        }, {
          rootMargin,
          threshold
        });

        observer.observe(section);
      });
    } else {
      // Fallback for browsers without IntersectionObserver
      lazySection.forEach(section => {
        section.classList.add('is-visible');
      });
    }
  });
</script>

<style>
  .lazy-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .lazy-section.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>